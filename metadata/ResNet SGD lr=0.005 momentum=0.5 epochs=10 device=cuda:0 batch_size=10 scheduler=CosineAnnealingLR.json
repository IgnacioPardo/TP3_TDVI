{
    "batch_size": 10,
    "epochs": 10,
    "layers": "ResNet(  (conv1): Sequential(    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (2): ReLU()  )  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)  (layer0): Sequential(    (0): ResidualBlock(      (conv1): Sequential(        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): ReLU()      )      (conv2): Sequential(        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (relu): ReLU()    )    (1): ResidualBlock(      (conv1): Sequential(        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): ReLU()      )      (conv2): Sequential(        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (relu): ReLU()    )  )  (layer1): Sequential(    (0): ResidualBlock(      (conv1): Sequential(        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): ReLU()      )      (conv2): Sequential(        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (downsample): Sequential(        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2))        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (relu): ReLU()    )    (1): ResidualBlock(      (conv1): Sequential(        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): ReLU()      )      (conv2): Sequential(        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (relu): ReLU()    )  )  (layer2): Sequential(    (0): ResidualBlock(      (conv1): Sequential(        (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): ReLU()      )      (conv2): Sequential(        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (downsample): Sequential(        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2))        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (relu): ReLU()    )    (1): ResidualBlock(      (conv1): Sequential(        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): ReLU()      )      (conv2): Sequential(        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (relu): ReLU()    )  )  (layer3): Sequential(    (0): ResidualBlock(      (conv1): Sequential(        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): ReLU()      )      (conv2): Sequential(        (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (downsample): Sequential(        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2))        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (relu): ReLU()    )    (1): ResidualBlock(      (conv1): Sequential(        (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (2): ReLU()      )      (conv2): Sequential(        (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )      (relu): ReLU()    )  )  (avgpool): AvgPool2d(kernel_size=7, stride=1, padding=0)  (fc): Linear(in_features=512, out_features=10, bias=True))",
    "loss": "CrossEntropyLoss",
    "model_class": "ResNet",
    "model_type": "ResNet",
    "name": "ResNet SGD lr=0.005 momentum=0.5 epochs=10 device=cuda:0 batch_size=10 scheduler=CosineAnnealingLR",
    "optimizer": "CosineAnnealingLR",
    "optimizer_params": "{'T_max': 32, 'eta_min': 0.005, 'optimizer': SGD (\nParameter Group 0\n    dampening: 0\n    differentiable: False\n    foreach: None\n    initial_lr: 0.005\n    lr: 0.005\n    maximize: False\n    momentum: 0.5\n    nesterov: False\n    weight_decay: 0\n), 'base_lrs': [0.005], 'last_epoch': 0, 'verbose': False, '_step_count': 1, '_get_lr_called_within_step': False, '_last_lr': [0.005]}",
    "regularizations": "{}",
    "train_acc": 96.302,
    "train_loss": 0.01098103119243533,
    "val_acc": 79.97,
    "val_loss": 0.07358486703867093
}